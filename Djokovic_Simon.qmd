---
title: "Djokovic_Simon"
format: html
---

```{r}
#| output: false
library(tidyverse)
library(compr)
library(broom)
library(dplyr)
library(readr)
library(deuce)

# Source the functions
source("comp_prior_start.R")
source("bayes_intro.R")
source("wrangle_point_level_data.R")
source("Create_Prior.R")
```

We are going to look at the Djokovic vs Simon 2016 Australian Open match. Let's include all hard court matches since the start of Australian Open the year before in 2015, up until start of the 2016 Australian Open.
```{r}
aug_mod_djok <- create_prior(ext = c("atp_matches_2015.csv",
                                 "atp_matches_2016.csv"),
                         tourn_name = "Australian Open",
                         surf = "Hard",
                         start_date = "2015-01-19",
                         end_date = "2016-01-16",
                         player1 = "Novak Djokovic",
                         player2 = "Gilles Simon")
aug_mod_djok
# probability Djokovic wins a point on serve
expit(0.637183778) # 0.6541166
# probability Djokovic wins a point on return
expit(-0.006429319) # 0.4983927

# Do negation for Simon points
# probability Simon wins a point on serve
expit(0.006429319) # 0.5016073
# probability Simon wins a point on return
expit(-0.637183778) # 0.3458834
```

Get the point level data for the 2016 Australian Open match
```{r}
library(rstanarm)
# get Djokovic vs Simon point level data for the 2016 Australian Open match

# note that Djokovic is player1 and Simon is player2
both_serving_df <- wrangle_point_level(ext = "2016-ausopen-points.csv",
                               ID = "2016-ausopen-1401")

djokovic_serving <- both_serving_df[[1]]
simon_serving <- both_serving_df[[2]]
```

Get a data frame with the probabilities for each player seving
```{r}
combined_prob_df <- get_probabilities_df(p1_serving_df = djokovic_serving,
                                 p2_serving_df = simon_serving,
                                 p1 = "Novak Djokovic",
                                 p2 = "Gilles Simon",
                                 p1_original_prob = 0.637183778,
                                 p1_original_se = 0.05021628,
                                 p2_original_prob = 0.006429319,
                                 p2_original_se = 0.04858680)
```

Now using in_match_win(), need to split the data frame into two separate data frames, one for Djokovic serving and one for Simon serving again
```{r}
combined_prob_df_test <- combined_prob_df |>
  mutate(PointServer = case_when(P1PointsWon == 0 & P2PointsWon == 0 & PointServer == 1 ~ 2,
                                 P1PointsWon == 0 & P2PointsWon == 0 & PointServer == 2 ~ 1,
                                 TRUE ~ PointServer))

# Djokovic serving
p1_serv_test <- combined_prob_df_test |>
  filter(PointServer == 1)

# Simon serving
p2_serv_test <- combined_prob_df_test |>
  filter(PointServer == 2)

p1_serving_tib_test <- tibble(
  point_a = p1_serv_test$P1PointsWon,
  point_b = p1_serv_test$P2PointsWon,
  game_a = p1_serv_test$P1GamesWon,
  game_b = p1_serv_test$P2GamesWon,
  set_a = p1_serv_test$P1SetsWon,
  set_b = p1_serv_test$P2SetsWon,
  server.prob = p1_serv_test$p1_wserv_prob,
  returner.prob = p1_serv_test$p2_wserv_prob
)

p2_serving_tib_test <- tibble(
  point_a = p2_serv_test$P2PointsWon,
  point_b = p2_serv_test$P1PointsWon,
  game_a = p2_serv_test$P2GamesWon,
  game_b = p2_serv_test$P1GamesWon,
  set_a = p2_serv_test$P2SetsWon,
  set_b = p2_serv_test$P1SetsWon,
  server.prob = p2_serv_test$p2_wserv_prob,
  returner.prob = p2_serv_test$p1_wserv_prob
)

# calculate probability of Djokovic winning throughout the match
p1_win_prob_test <- p1_serving_tib_test |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)
# add probability to Djokovic df
p1_serv_test$probability <- p1_win_prob_test
# fix the probability column
p1_serv_test <- p1_serv_test |> unnest(probability)

# calculate probability of Simon winning throughout the match
p2_win_prob_test <- p2_serving_tib_test |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)
# add probability to Simon df
p2_serv_test$probability <- p2_win_prob_test
# fix the probability column
p2_serv_test <- p2_serv_test |> unnest(probability)

# combine the data frames
recombined_df_test <- rbind(p2_serv_test, p1_serv_test) |> 
  arrange(pt_number) |>
  mutate(total_sets = as.factor(P1SetsWon + P2SetsWon)) |>
  # create probability var for just djokovic winning
  mutate(win_prob_p1 = ifelse(PointServer == 1, probability, 1 - probability))
```

Plot the probability of winning the match for each player
```{r}
# change server variable to player name
plot_df_test <- recombined_df_test |>
  mutate(PointServer = ifelse(PointServer == 1, "Djokovic", "Simon"))

# convert the server column to a factor
plot_df_test$PointServer <- factor(plot_df_test$PointServer)

library(ggplot2)

# plot the probability of winning the match for each player
plot_df_test |> ggplot(aes(x = pt_number, y = probability)) +
  geom_line(aes(y = win_prob_p1)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Djokovic vs Simon Australian Open R4 2016",
       subtitle = "Probability of Djokovic Winning Match",
       color = "Server") +
  coord_cartesian(ylim = c(0, NA)) +
  theme_bw()
```