---
title: "Forming_Prior_Dist"
format: html
---

```{r}
library(tidyverse)
library(compr)
library(broom)
library(dplyr)

# Source the functions
source("comp_prior_start.R")
```

We are going to look at the Alcaraz vs Djokovic 2023 Wimbledon Final. Let's include all grass court matches since the start of Wimbledon the year before in 2022.
```{r}
## reading in atp matches for 3 years
ext_vec <- c("atp_matches_2022.csv",
             "atp_matches_2023.csv")
atp_22_23 <- purrr::map(ext_vec, read_matches) |>
  bind_rows()

# Now filter for relevant matches
atp_wimbledon_prior <- atp_22_23 |>
  mutate(tourney_date = lubridate::ymd(tourney_date)) |>
  filter(tourney_name == "Wimbledon" |
           (surface == "Grass" & tourney_date <= "2023-07-03" & tourney_date >= "2023-01-01"))

# Put the relevant match data into point format
atp_wimbledon_points <- atp_wimbledon_prior |>
  select(1:3,6,7,9,11,17,19,24,30,32,33,39,41,42,46,48) |>
  mutate(w_svpt_w = w_1stWon + w_2ndWon,
         w_svpt_l = w_svpt - w_svpt_w,
         l_svpt_w = l_1stWon + l_2ndWon,
         l_svpt_l = l_svpt - l_svpt_w) |>
  select(winner_name, loser_name, w_svpt_w, w_svpt_l, l_svpt_w, l_svpt_l, match_num,
         1:5, 7, 9, 16:17) |>
  pivot_longer(cols = c("w_svpt_w", "w_svpt_l", "l_svpt_w", "l_svpt_l"),
                        names_to = "won_point",
                        values_to = "server") |>
  mutate(pt_winner = recode(
    won_point,
    "w_svpt_w" = 1,
    "w_svpt_l" = 0,
    "l_svpt_w" = 0,
    "l_svpt_l" = 1)) |>
  mutate(pt_server = recode(
    won_point,
    "w_svpt_w" = 1,
    "w_svpt_l" = 1,
    "l_svpt_w" = 0,
    "l_svpt_l" = 0)) |>
  # remove rows where server is NA (walkovers)
  filter(!is.na(server))

atp_wimbledon_uncount <- uncount(atp_wimbledon_points, weights = as.numeric(server)) |>
  mutate(p1_server = ifelse(pt_server == 1, 1, 0),
         p2_server = ifelse(pt_server == 0, 1, 0)) |>
  # reorganize columns
  select(winner_name, loser_name, pt_winner, p1_server, p2_server, everything()) |>
  rename(player1 = winner_name, player2 = loser_name)

# Now fit the model to your point data with serving effects
comp_mod <- comp_glm(pt_winner ~ -1, data = atp_wimbledon_uncount,
                             p1 = "player1", p2 = "player2",
                             p1_effects = ~ p1_server, p2_effects = ~ p2_server,
                             ref_player = "Milos Raonic")

# tidy the model to view its output
prior_dist_df <- comp_mod |>
  broom::tidy() |>
  print(n = Inf)
# view output
prior_dist_df
```

Create data frame that has Alcaraz and Djokovic
```{r}
# 2. Create a new data frame that has the players for your match of interest (two rows: one when p1 is serving, one when p2 is serving). 2X2
match_data <- data.frame(
  player1 = c("Novak Djokovic", "Novak Djokovic"),
  player2 = c("Carlos Alcaraz", "Carlos Alcaraz"),
  p1_server = c(1, 0),
  p2_server = c(0, 1))
```

Use `augment()` to get a predicted log odds of p1 winning a point while serving and of p1 winning a point while returning.
```{r}
aug_mod <- aug_mod(newdata = match_data, comp_mod = comp_mod)
aug_mod
```

```{r}
library(rstanarm)
```


