---
title: "Forming_Prior_Dist"
format: html
---

```{r}
#| output: false
library(tidyverse)
library(compr)
library(broom)
library(dplyr)
library(readr)
library(deuce)

# Source the functions
source("comp_prior_start.R")
source("bayes_intro.R")
source("wrangle_point_level_data.R")
source("Create_Prior.R")
```

We are going to look at the Alcaraz vs Djokovic 2023 Wimbledon Final. Let's include all grass court matches since the start of Wimbledon the year before in 2022, up until the semifinals of the 2023 Wimbledon tournament.

Get probabilities of Alcaraz winning a point while serving and while returning
```{r}
aug_mod_alc <- create_prior(ext = c("atp_matches_2022.csv",
                                 "atp_matches_2023.csv"),
                         tourn_name = "Wimbledon",
                         surf = "Grass",
                         start_date = "2023-01-01",
                         end_date = "2023-07-15",
                         player1 = "Carlos Alcaraz",
                         player2 = "Novak Djokovic")
aug_mod_alc

# probability Alcaraz wins a point on serve
expit(0.6194617) # 0.6500961
# probability Alcaraz wins a point on return
expit(-0.6703011) #  0.3384294
# always looking at P1 probability

# Do negation for Djokovic points
# probability Djoko wins a point on serve
expit(0.6703011) # 0.6615706
# probability Djoko wins a point on return
expit(-0.6194617) # 0.3499039
```

Get the point level data for the 2023 Wimbledon final
```{r}
library(rstanarm)
# get ALcaraz vs Djokovic point level data for the 2023 Wimbledon final
# start by getting all point data for 2023 Wimbledon

# NOTE: Player 1 is Alcaraz and Player 2 is Djokovic
both_serving_df <- wrangle_point_level(ext = "2023-wimbledon-points.csv",
                               ID = "2023-wimbledon-1701")

alcaraz_serving <- both_serving_df[[1]]
djokovic_serving <- both_serving_df[[2]]
```

Get a data frame with the probabilities for each player seving
```{r}
combined_prob_df <- get_probabilities_df(p1_serving_df = alcaraz_serving,
                                 p2_serving_df = djokovic_serving,
                                 p1 = "Carlos Alcaraz",
                                 p2 = "Novak Djokovic",
                                 p1_original_prob = 0.6194617,
                                 p1_original_se = 0.1038723,
                                 p2_original_prob = 0.6703011,
                                 p2_original_se = 0.1009560)
```

Now using in_match_win(), need to split the data frame into two separate data frames, one for Djokovic serving and one for Alcaraz serving again
```{r}
# djokovic serving
p2_serv <- combined_prob_df |>
  filter(PointServer == 2)
# alcara serving
p1_serv <- combined_prob_df |>
  filter(PointServer == 1)

p2_serving_tib <- tibble(
  point_a = p2_serv$P2PointsWon,
  point_b = p2_serv$P1PointsWon,
  game_a = p2_serv$P2GamesWon,
  game_b = p2_serv$P1GamesWon,
  set_a = p2_serv$P2SetsWon,
  set_b = p2_serv$P1SetsWon,
  server.prob = p2_serv$p2_wserv_prob,
  returner.prob = p2_serv$p1_wserv_prob
)

p1_serving_tib <- tibble(
  point_a = p1_serv$P1PointsWon,
  point_b = p1_serv$P2PointsWon,
  game_a = p1_serv$P1GamesWon,
  game_b = p1_serv$P2GamesWon,
  set_a = p1_serv$P1SetsWon,
  set_b = p1_serv$P2SetsWon,
  server.prob = p1_serv$p1_wserv_prob,
  returner.prob = p1_serv$p2_wserv_prob
)

# calculate probability of Djokovic winning throughout the match
p2_win_prob <- p2_serving_tib |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)
# add probability to Djokovic df
p2_serv$probability <- p2_win_prob
# fix the probability column
p2_serv <- p2_serv |> unnest(probability)

# calculate probability of Alcaraz winning throughout the match
p1_win_prob <- p1_serving_tib |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)
# add probability to Alcaraz df
p1_serv$probability <- p1_win_prob
# fix the probability column
p1_serv <- p1_serv |> unnest(probability)

# combine the data frames
recombined_df <- rbind(p2_serv, p1_serv) |> 
  arrange(pt_number)
```

Plot the probability of winning the match for each player
```{r}
# change server variable to player name
plot_df <- recombined_df |>
  mutate(PointServer = ifelse(PointServer == 1, "Alcaraz", "Djokovic"))

# convert the server column to a factor
plot_df$PointServer <- factor(plot_df$PointServer)

library(ggplot2)

# plot the probability of winning the match for each player
plot_df |> ggplot(aes(x = pt_number, y = probability, color = PointServer)) +
  geom_line() +
  scale_color_manual(values = c("red", "blue")) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Djokovic Wimbledon Final 2023",
       subtitle = "Probability of Winning Match for Each Player",
       color = "Server") +
  theme_bw()
```





Look at p1_serv and p2_serv dataframes, error is when:

Djokovic is serving at 3-5 in the final set, he holds serve to make it 5-4 but now alcaraz is serving. But there is a row in the dataset where it says Djokovic is still serving at 5-4, 0-0. This jumps up his probability of winning the match.

This happens 

```{r}
test <- p2_serv |> filter(P1PointsWon == 0 & P2PointsWon == 0)
```


```{r}
combined_prob_df_test <- combined_prob_df |>
  mutate(PointServer = case_when(P1PointsWon == 0 & P2PointsWon == 0 & PointServer == 1 ~ 2,
                                 P1PointsWon == 0 & P2PointsWon == 0 & PointServer == 2 ~ 1,
                                 TRUE ~ PointServer))

# djokovic serving
p2_serv_test <- combined_prob_df_test |>
  filter(PointServer == 2)
# alcara serving
p1_serv_test <- combined_prob_df_test |>
  filter(PointServer == 1)

p2_serving_tib_test <- tibble(
  point_a = p2_serv_test$P2PointsWon,
  point_b = p2_serv_test$P1PointsWon,
  game_a = p2_serv_test$P2GamesWon,
  game_b = p2_serv_test$P1GamesWon,
  set_a = p2_serv_test$P2SetsWon,
  set_b = p2_serv_test$P1SetsWon,
  server.prob = p2_serv_test$p2_wserv_prob,
  returner.prob = p2_serv_test$p1_wserv_prob
)

p1_serving_tib_test <- tibble(
  point_a = p1_serv_test$P1PointsWon,
  point_b = p1_serv_test$P2PointsWon,
  game_a = p1_serv_test$P1GamesWon,
  game_b = p1_serv_test$P2GamesWon,
  set_a = p1_serv_test$P1SetsWon,
  set_b = p1_serv_test$P2SetsWon,
  server.prob = p1_serv_test$p1_wserv_prob,
  returner.prob = p1_serv_test$p2_wserv_prob
)

# calculate probability of Djokovic winning throughout the match
p2_win_prob_test <- p2_serving_tib_test |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)
# add probability to Djokovic df
p2_serv_test$probability <- p2_win_prob_test
# fix the probability column
p2_serv_test <- p2_serv_test |> unnest(probability)

# calculate probability of Alcaraz winning throughout the match
p1_win_prob_test <- p1_serving_tib_test |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)
# add probability to Alcaraz df
p1_serv_test$probability <- p1_win_prob_test
# fix the probability column
p1_serv_test <- p1_serv_test |> unnest(probability)

# combine the data frames
recombined_df_test <- rbind(p2_serv_test, p1_serv_test) |> 
  arrange(pt_number) |>
  mutate(total_sets = as.factor(P1SetsWon + P2SetsWon)) |>
  # create probability var for just Alcaraz winning
  mutate(win_prob_p1 = ifelse(PointServer == 1, probability, 1 - probability))
```

Plot the probability of winning the match for each player
```{r}
# change server variable to player name
plot_df_test <- recombined_df_test |>
  mutate(PointServer = ifelse(PointServer == 1, "Alcaraz", "Djokovic"))

# convert the server column to a factor
plot_df_test$PointServer <- factor(plot_df_test$PointServer)

library(ggplot2)

# plot the probability of winning the match for each player
plot_df_test |> ggplot(aes(x = pt_number, y = probability)) +
  geom_line(aes(y = win_prob_p1)) +
  scale_color_manual(values = c("red", "blue")) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Djokovic Wimbledon Final 2023",
       subtitle = "Probability of Alcaraz Winning the Match",
       color = "Server") +
  coord_cartesian(ylim = c(0, NA)) +
  theme_bw()
```


```{r}
set_boundaries <- plot_df_test |>
  group_by(total_sets) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5)

plot_df_test |> ggplot(aes(x = pt_number, y = probability, color = PointServer)) +
  geom_rect(data = set_boundaries, aes(xmin = xmin, xmax = xmax, ymin = -Inf, ymax = Inf, fill = total_sets), alpha = 0.2) + 
  geom_line() +
  scale_color_manual(values = c("red", "blue")) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Djokovic Wimbledon Final 2023",
       subtitle = "Probability of Winning Match for Each Player",
       color = "Server") +
  theme_bw()
```


