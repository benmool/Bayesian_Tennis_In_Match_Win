---
title: "Forming_Prior_Dist"
format: html
---

```{r}
#| output: false
library(tidyverse)
library(compr)
library(broom)
library(dplyr)
library(readr)
library(deuce)

# Source the functions
source("comp_prior_start.R")
source("bayes_intro.R")
source("wrangle_point_level_data.R")
source("Create_Prior.R")
```

We are going to look at the Alcaraz vs Djokovic 2023 Wimbledon Final. Let's include all grass court matches since the start of Wimbledon the year before in 2022, up until the semifinals of the 2023 Wimbledon tournament.

Get probabilities of Alcaraz winning a point while serving and while returning
```{r}
aug_mod_alc <- create_prior(ext = c("atp_matches_2022.csv",
                                 "atp_matches_2023.csv"),
                         tourn_name = "Wimbledon",
                         surf = "Grass",
                         start_date = "2023-01-01",
                         end_date = "2023-07-15",
                         player1 = "Carlos Alcaraz",
                         player2 = "Novak Djokovic")
aug_mod_alc

# probability Alcaraz wins a point on serve
expit(0.5603895) # 0.6365427
# probability Alcaraz wins a point on return
expit(-0.7624800) #  0.3181081
# always looking at P1 probability
```

Let's fit the Bayesian model for a single state of the match:
```{r}
library(rstanarm)
# get ALcaraz vs Djokovic point level data for the 2023 Wimbledon final
# start by getting all point data for 2023 Wimbledon

# NOTE: Player 1 is Alcaraz and Player 2 is Djokovic
both_serving_df <- wrangle_point_level(ext = "2023-wimbledon-points.csv",
                               ID = "2023-wimbledon-1701")

alcaraz_serving <- both_serving_df[[1]]
djokovic_serving <- both_serving_df[[2]]
```

Let's look right at the start of the second set tiebreak, after Djokovic has won the first set 6-1, and just held to force a second set tiebreak (6-6 in the second set).
```{r}
# slice the data to the start of the second set tiebreak
match_state_df <- djokovic_serving |>
  slice(1:68) |>
  mutate(p1_server = 0,
         p2_server = 1)

# add player1 and player2 columns
# also create indicator variables that they are serving (2 columns)
match_state_df <- match_state_df |>
  mutate(player1 = "Carlos Alcaraz",
         player2 = "Novak Djokovic") |>
# also create indicator if serving player won the point
  mutate(server_won = ifelse(PointWinner == 2, 1, 0))

# original Djokovic probability (wins point on serve)
expit(0.7624800) # 0.6818919

# fit the model to the data
stan_glm_fit <- stan_glm(server_won ~ 1, data = match_state_df,
                         family = binomial,
                         prior_intercept = normal(0.7624800, 0.08390474),
                         seed = 123)
# new Djokovic probability (wins point on serve)
coef(stan_glm_fit) |> expit() # 0.6786362
```

Get a data frame with the probabilities for each player seving
```{r}
combined_prob_df <- get_probabilities_df(p1_serving_df = alcaraz_serving,
                                 p2_serving_df = djokovic_serving,
                                 p1 = "Carlos Alcaraz",
                                 p2 = "Novak Djokovic",
                                 p1_original_prob = 0.5603895,
                                 p1_original_se = 0.08379219,
                                 p2_original_prob = 0.7624800,
                                 p2_original_se = 0.08390474)
```

Now using in_match_win(), need to split the data frame into two separate data frames, one for Djokovic serving and one for Alcaraz serving again
```{r}
# djokovic serving
p2_serv <- combined_prob_df |>
  filter(PointServer == 2)
# alcara serving
p1_serv <- combined_prob_df |>
  filter(PointServer == 1)

p2_serving_tib <- tibble(
  point_a = p2_serv$P2PointsWon,
  point_b = p2_serv$P1PointsWon,
  game_a = p2_serv$P2GamesWon,
  game_b = p2_serv$P1GamesWon,
  set_a = cumsum(p2_serv$SetWinner == 2),
  set_b = cumsum(p2_serv$SetWinner == 1),
  server.prob = p2_serv$p2_wserv_prob,
  returner.prob = p2_serv$p1_wserv_prob
)

p1_serving_tib <- tibble(
  point_a = p1_serv$P1PointsWon,
  point_b = p1_serv$P2PointsWon,
  game_a = p1_serv$P1GamesWon,
  game_b = p1_serv$P2GamesWon,
  set_a = cumsum(p1_serv$SetWinner == 1),
  set_b = cumsum(p1_serv$SetWinner == 2),
  server.prob = p1_serv$p1_wserv_prob,
  returner.prob = p1_serv$p2_wserv_prob
)

# calculate probability of Djokovic winning throughout the match
p2_win_prob <- p2_serving_tib |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)
# add probability to Djokovic df
p2_serv$probability <- p2_win_prob
# fix the probability column
p2_serv <- p2_serv |> unnest(probability)

# calculate probability of Alcaraz winning throughout the match
p1_win_prob <- p1_serving_tib |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)
# add probability to Alcaraz df
p1_serv$probability <- p1_win_prob
# fix the probability column
p1_serv <- p1_serv |> unnest(probability)

# combine the data frames
recombined_df <- rbind(p2_serv, p1_serv) |> 
  arrange(pt_number)
```

Plot the probability of winning the match for each player
```{r}
# change server variable to player name
plot_df <- recombined_df |>
  mutate(PointServer = ifelse(PointServer == 1, "Alcaraz", "Djokovic"))

# convert the server column to a factor
plot_df$PointServer <- factor(plot_df$PointServer)

library(ggplot2)

# plot the probability of winning the match for each player
plot_df |> ggplot(aes(x = pt_number, y = probability, color = PointServer)) +
  geom_line() +
  scale_color_manual(values = c("red", "blue")) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Djokovic Wimbledon Final 2023",
       subtitle = "Probability of Winning Match for Each Player",
       color = "Server") +
  theme_bw()
```












```{r}
# djokovic serving
djok_serving <- combined_prob_df |>
  filter(PointServer == 2) |>
  mutate(alc_wret_prob = 1 - djok_wserv_prob)
# alcara serving
alc_serving <- combined_prob_df |>
  filter(PointServer == 1) |>
  mutate(djok_wret_prob = 1 - alc_wserv_prob)

djok_serving_f <- tibble(
  point_a = djok_serving$P2PointsWon,
  point_b = djok_serving$P1PointsWon,
  game_a = djok_serving$P2GamesWon,
  game_b = djok_serving$P1GamesWon,
  set_a = cumsum(djok_serving$SetWinner == 2),
  set_b = cumsum(djok_serving$SetWinner == 1),
  server.prob = djok_serving$djok_wserv_prob,
  returner.prob = djok_serving$alc_wserv_prob
)

alc_serving_f <- tibble(
  point_a = alc_serving$P1PointsWon,
  point_b = alc_serving$P2PointsWon,
  game_a = alc_serving$P1GamesWon,
  game_b = alc_serving$P2GamesWon,
  set_a = cumsum(alc_serving$SetWinner == 1),
  set_b = cumsum(alc_serving$SetWinner == 2),
  server.prob = alc_serving$alc_wserv_prob,
  returner.prob = alc_serving$djok_wserv_prob
)

# calculate probability of Djokovic winning throughout the match
djok_win_prob <- djok_serving_f |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)

# calculate probability of Alcaraz winning throughout the match
alc_win_prob <- alc_serving_f |> pmap(in_match_win, bestof3 = FALSE,
                   advantage = FALSE)

test <- bind_cols(djok_win_)


in_match_win(point_a = 3,
                 point_b = 6,
                 game_a = 6,
                 game_b = 6,
                 set_a = 2,
                 set_b = 2,
                 server.prob = 0.6,
                 returner.prob = 0.4,
             bestof3 = FALSE,
             advantage = FALSE)
```










```{r}
ext = c("atp_matches_2022.csv",
        "atp_matches_2023.csv")
tourn_name = "Wimbledon"
surf = "Grass"
start_date = "2023-07-03"
end_date = "2023-01-01"
player1 = "Carlos Alcaraz"
player2 = "Novak Djokovic"
  
matches <- purrr::map(ext, read_matches) |>
    bind_rows()
  
  # filter for relevant matches
prior <- matches |>
    mutate(tourney_date = lubridate::ymd(tourney_date)) |>
    filter(tourney_name ==  as.character(tourn_name) |
             (surface == as.character(surf) & 
                tourney_date <= lubridate::ymd(end_date) & 
                tourney_date >= lubridate::ymd(start_date)))

atp_wimbledon_prior <- atp_22_23 |>
  mutate(tourney_date = lubridate::ymd(tourney_date)) |>
  filter(tourney_name == "Wimbledon" |
           (surface == "Grass" & tourney_date <= "2023-07-03" & tourney_date >= "2023-01-01"))
  
prior_points <- prior |>
    select(1:3,6,7,9,11,17,19,24,30,32,33,39,41,42,46,48) |>
    mutate(w_svpt_w = w_1stWon + w_2ndWon,
           w_svpt_l = w_svpt - w_svpt_w,
           l_svpt_w = l_1stWon + l_2ndWon,
           l_svpt_l = l_svpt - l_svpt_w) |>
    select(winner_name, loser_name, w_svpt_w, w_svpt_l, l_svpt_w, l_svpt_l, match_num,
           1:5, 7, 9, 16:17) |>
    pivot_longer(cols = c("w_svpt_w", "w_svpt_l", "l_svpt_w", "l_svpt_l"),
                 names_to = "won_point",
                 values_to = "server") |>
    mutate(pt_winner = recode(
      won_point,
      "w_svpt_w" = 1,
      "w_svpt_l" = 0,
      "l_svpt_w" = 0,
      "l_svpt_l" = 1)) |>
    mutate(pt_server = recode(
      won_point,
      "w_svpt_w" = 1,
      "w_svpt_l" = 1,
      "l_svpt_w" = 0,
      "l_svpt_l" = 0)) |>
    # remove rows where server is NA (walkovers)
    filter(!is.na(server))
  
prior_points_uncount <- uncount(prior_points, weights = as.numeric(server)) |>
    mutate(p1_server = ifelse(pt_server == 1, 1, 0),
           p2_server = ifelse(pt_server == 0, 1, 0)) |>
    # reorganize columns
    select(winner_name, loser_name, pt_winner, p1_server, p2_server, everything()) |>
    rename(player1 = winner_name, player2 = loser_name)
  
  # Now fit the model to your point data with serving effects
comp_mod_test <- comp_glm(pt_winner ~ -1, data = prior_points_uncount,
                       p1 = "player1", p2 = "player2",
                       p1_effects = ~ p1_server, p2_effects = ~ p2_server,
                       ref_player = "Milos Raonic")
  
  # tidy the model to view its output
prior_dist_df2 <- comp_mod_test |>
  broom::tidy() |>
  print(n = Inf)
# view output
prior_dist_df2 |> filter(term == "`Novak Djokovic`" | term == "`Carlos Alcaraz`") 
  
match_data <- data.frame(
  player1 = c("`" + player1 + "`"),
  player2 = c("`" + player2 + "`"),
  p1_server = c(1, 0),
  p2_server = c(0, 1)
)

match_data <- data.frame(
  player1 = player1,
  player2 = player2,
  p1_server = c(1, 0),
  p2_server = c(0, 1)
)
  
aug_mod <- augment(comp_mod_test, newdata = match_data)
```

