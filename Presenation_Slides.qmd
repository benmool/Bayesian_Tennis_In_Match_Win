---
title: "Estimating Tennis In-Match-Win Probability with Bayesian Modeling"
format: revealjs
author: "Ben Moolman"
institute: "St. Lawrence University"
---

```{r}
#| output: false
library(tidyverse)
library(compr)
library(broom)
library(dplyr)
library(readr)
library(deuce)
library(ggplot2)
library(knitr)
library(kableExtra)

# Source the functions
source("comp_prior_start.R")
source("bayes_intro.R")
source("wrangle_point_level_data.R")
source("Create_Prior.R")
source("get_probabilities_df.R")
source("get_plot_df.R")
```

## Introduction

  - Ben Moolman
  - Statistics and Mathematics Double Major
  - Member of St. Lawrence Men's Tennis Team

## Bayesian Prior, Data, and Posterior

![https://datainsights.de/introduction-to-bayesian-inference-with-pystan-part-ii/](bayesian_diagram.png)

## Prior Distribution

network diagram

```{r}
#| warning: false
#| eval: false
library(tidygraph)
matches2022 <- purrr::map("atp_matches_2022.csv", read_matches) |>
  bind_rows() |>
  filter(winner_seed <= 2 & best_of == 5) |>
  select(winner_name, loser_name)

set.seed(12)
random_sample <- matches2022 |> sample_n(20)

player_names <- tibble(player1 = random_sample$winner_name,
                       player2 = random_sample$loser_name)

nodes_tennis <- player_names |> pivot_longer(c(player1, player2),
                             names_to = "player_num",
                             values_to = "player") |>
  distinct(player) |>
  rowid_to_column("id") |>
  rename(label = player)

player_sum <- player_names |> 
  mutate(p1 = if_else(player1 > player2,
                      true = player2,
                      false = player1),
         p2 = if_else(player1 > player2,
                      true = player1,
                      false = player2)) |>
  select(-player1, -player2) |>
  group_by(p1, p2) |>
  summarise(n = n())

# create edges to match with ids
edges_tennis <- left_join(player_sum, nodes_tennis, 
                   by = join_by(p1 == label)) |>
  rename(from = "id") |>
  left_join(nodes_tennis, by = join_by(p2 == label)) |>
  rename(to = "id") |>
  ungroup() |>
  dplyr::select(to, from, n)
# create network obj
network_obj_tennis <- tbl_graph(nodes = nodes_tennis, edges = edges_tennis, directed = FALSE)

library(ggraph)
ggraph(network_obj_tennis |> mutate(centrality = centrality_authority()),
                            layout = "stress") +
  geom_edge_link(aes(width = n), alpha = 0.7, show.legend = FALSE) +
  geom_node_point(aes(size = centrality)) +
  scale_edge_width(range = c(0.5, 3)) +
  geom_node_text(aes(label = label), repel = TRUE)  +
  scale_colour_viridis_d() +
  guides(size = "none") +
  labs(title = "Network Diagram")

ggraph(network_obj_tennis |> mutate(centrality = centrality_authority()),
       layout = "fr") +  # Change layout algorithm to force-directed "fr"
  geom_edge_link(aes(width = n), alpha = 0.7, show.legend = FALSE) +
  geom_node_point(aes(size = centrality)) +
  scale_edge_width(range = c(0.5, 3)) +
  geom_node_text(aes(label = label), repel = TRUE, 
                 nudge_x = 0.1, nudge_y = 0.1) +  # Add nudge parameters for slight adjustments
  scale_colour_viridis_d() +
  guides(size = "none") +
  labs(title = "Network Diagram")
```


## Prior Distribution



## Data + Posterior


## Point Level Data

```{r}
alcaraz_v_sinner_df <- wrangle_point_level(ext = "2022-usopen-points.csv",
                               ID = "2022-usopen-1503")
sin_serving <- alcaraz_v_sinner_df[[1]]
alc_serving <- alcaraz_v_sinner_df[[2]]
alc_v_sinner_full <- bind_rows(sin_serving, alc_serving) |>
  arrange(pt_number) |>
  select(pt_number, PointServer, everything())
```

```{r}
alc_v_sinner_full |> slice(1:10) |>
  mutate(P2Score = ifelse(P2Score == 4, "AD", P2Score)) |>
  kable() |>
  kable_styling(full_width = FALSE,
                font_size = 17)

alc_v_sinner_full |> slice(63:70) |>
  kable() |>
  kable_styling(full_width = FALSE,
                font_size = 17)
```

## Calculating In-Match-Win Probability

![https://towardsdatascience.com/building-a-tennis-match-simulator-in-python-3add9af6bebe](tennis_game_flow_chart.png)

## Case Study 1: Alcaraz vs Sinner

```{r}
#| output: false
#| cache: true
sin_alc_paired <- wrangle_point_level(ext = "2022-usopen-points.csv",
                               ID = "2022-usopen-1503")

sin_serving_sp <- sin_alc_paired[[1]]
alc_serving_sp <- sin_alc_paired[[2]]

combined_prob_sin_alc_sp_df <- get_probabilities_df(p1_serving_df = sin_serving,
                                 p2_serving_df = alc_serving,
                                 p1 = "Jannik Sinner",
                                 p2 = "Carlos Alcaraz",
                                 p1_original_prob = 0.2168077,
                                 p1_original_se = 0.1378437,
                                 p2_original_prob = 0.4700036,
                                 p2_original_se = 0.1581139)

plot_sin_alc_small_prior <- get_plot_df(combined_df = combined_prob_sin_alc_sp_df, 
                        which_player_prob = 2,
                        best_of_3 = FALSE,
                        advantage = FALSE) |>
  mutate(set_number = as.factor(as.numeric(total_sets))) |>
  # fix last row in data set where set_number is 6, should be a 5
  mutate(set_number = ifelse(pt_number == max(pt_number), '5', set_number)) |>
  mutate(set_number = as.factor(set_number))

fills <- c("#F57A5C", "#F5C25C", "#94E25B", "#69CEE0", "#A875CE")
```

```{r}
plot_first_set_sin_alc <- plot_sin_alc_small_prior |>
  filter(set_number == 1)

first_set_boundaries_alc_sin_small_prior <- plot_sin_alc_small_prior |>
  group_by(set_number) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5) |>
  filter(set_number == 1)
```

```{r}
plot_sin_alc_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_rect(data = first_set_boundaries_alc_sin_small_prior, aes(x = NULL, y = NULL, xmin = xmin, xmax = xmax, 
                                       ymin = -Inf, ymax = Inf, fill = set_number), alpha = 0.2) + 
  geom_line(data = plot_first_set_sin_alc, aes(y = win_prob_px)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Sinner US Open Quarterfinal 2022",
       subtitle = "Probability of Alcaraz Winning Match",
       caption = "Prior contains 'lead-up' tournaments to the 2022 USO and 2022 USO itself",
       color = "Server") +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_sin_alc_small_prior))) +
  scale_fill_manual(values = fills[1]) +
  theme_bw(base_size = 14)
```

## Case Study 1: Alcaraz vs Sinner

```{r}
plot_two_sets_sin_alc <- plot_sin_alc_small_prior |>
  filter(set_number == 1 | set_number == 2)

two_set_boundaries_alc_sin_small_prior <- plot_sin_alc_small_prior |>
  group_by(set_number) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5) |>
  filter(set_number == 1 | set_number == 2)
```

```{r}
plot_sin_alc_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_rect(data = two_set_boundaries_alc_sin_small_prior, aes(x = NULL, y = NULL, xmin = xmin, xmax = xmax, 
                                       ymin = -Inf, ymax = Inf, fill = set_number), alpha = 0.2) + 
  geom_line(data = plot_two_sets_sin_alc, aes(y = win_prob_px)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Sinner US Open Quarterfinal 2022",
       subtitle = "Probability of Alcaraz Winning Match",
       caption = "Prior contains 'lead-up' tournaments to the 2022 USO and 2022 USO itself",
       color = "Server") +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_sin_alc_small_prior))) +
  scale_fill_manual(values = fills[1:2]) +
  theme_bw(base_size = 14)
```

## Case Study 1: Alcaraz vs Sinner

```{r}
plot_three_sets_sin_alc <- plot_sin_alc_small_prior |>
  filter(set_number == 1 | set_number == 2 | set_number == 3)

three_set_boundaries_alc_sin_small_prior <- plot_sin_alc_small_prior |>
  group_by(set_number) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5) |>
  filter(set_number == 1 | set_number == 2 | set_number == 3)
```

```{r}
plot_sin_alc_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_rect(data = three_set_boundaries_alc_sin_small_prior, aes(x = NULL, y = NULL, xmin = xmin, xmax = xmax, 
                                       ymin = -Inf, ymax = Inf, fill = set_number), alpha = 0.2) + 
  geom_line(data = plot_three_sets_sin_alc, aes(y = win_prob_px)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Sinner US Open Quarterfinal 2022",
       subtitle = "Probability of Alcaraz Winning Match",
       caption = "Prior contains 'lead-up' tournaments to the 2022 USO and 2022 USO itself",
       color = "Server") +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_sin_alc_small_prior))) +
  scale_fill_manual(values = fills[1:3]) +
  theme_bw(base_size = 14)
```

## Case Study 1: Alcaraz vs Sinner

```{r}
plot_four_sets_sin_alc <- plot_sin_alc_small_prior |>
  filter(set_number == 1 | set_number == 2 | set_number == 3 | set_number == 4)

four_set_boundaries_alc_sin_small_prior <- plot_sin_alc_small_prior |>
  group_by(set_number) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5) |>
  filter(set_number == 1 | set_number == 2 | set_number == 3 | set_number == 4)
```

```{r}
plot_sin_alc_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_rect(data = four_set_boundaries_alc_sin_small_prior, aes(x = NULL, y = NULL, xmin = xmin, xmax = xmax, 
                                       ymin = -Inf, ymax = Inf, fill = set_number), alpha = 0.2) + 
  geom_line(data = plot_four_sets_sin_alc, aes(y = win_prob_px)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Sinner US Open Quarterfinal 2022",
       subtitle = "Probability of Alcaraz Winning Match",
       caption = "Prior contains 'lead-up' tournaments to the 2022 USO and 2022 USO itself",
       color = "Server") +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_sin_alc_small_prior))) +
  scale_fill_manual(values = fills[1:4]) +
  theme_bw(base_size = 14)
```

## Case Study 1: Alcaraz vs Sinner

```{r}
plot_five_sets_sin_alc <- plot_sin_alc_small_prior |>
  filter(set_number == 1 | set_number == 2 | set_number == 3 | set_number == 4 | set_number == 5)

five_set_boundaries_alc_sin_small_prior <- plot_sin_alc_small_prior |>
  group_by(set_number) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5) |>
  filter(set_number == 1 | set_number == 2 | set_number == 3 | set_number == 4 | set_number == 5)
```

```{r}
plot_sin_alc_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_rect(data = five_set_boundaries_alc_sin_small_prior, aes(x = NULL, y = NULL, xmin = xmin, xmax = xmax, 
                                       ymin = -Inf, ymax = Inf, fill = set_number), alpha = 0.2) + 
  geom_line(data = plot_five_sets_sin_alc, aes(y = win_prob_px)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Sinner US Open Quarterfinal 2022",
       subtitle = "Probability of Alcaraz Winning Match",
       caption = "Prior contains 'lead-up' tournaments to the 2022 USO and 2022 USO itself",
       color = "Server") +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_sin_alc_small_prior))) +
  scale_fill_manual(values = fills[1:5]) +
  theme_bw(base_size = 14)
```

## Case Study 1: Changing Prior

```{r}
#| output: false
#| cache: true
combined_prob_alc_sin_lp_df <- get_probabilities_df(p1_serving_df = sin_serving,
                                 p2_serving_df = alc_serving,
                                 p1 = "Jannik Sinner",
                                 p2 = "Carlos Alcaraz",
                                 p1_original_prob = 0.4105508,
                                 p1_original_se = 0.04554396,
                                 p2_original_prob = 0.4896720,
                                 p2_original_se = 0.04643726)

plot_sin_alc_large_prior <- get_plot_df(combined_df = combined_prob_alc_sin_lp_df,
                                        which_player_prob = 2,
                                        best_of_3 = FALSE,
                                        advantage = FALSE) |>
  mutate(set_number = as.factor(as.numeric(total_sets))) |>
  # fix last row in data set where set_number is 6, should be a 5
  mutate(set_number = ifelse(pt_number == max(pt_number), '5', set_number)) |>
  mutate(set_number = as.factor(set_number))

sin_serving_fp <- sin_alc_paired[[1]] |> 
  mutate(player1 = "Jannik Sinner",
         player2 = "Carlos Alcaraz") |>
    # also create indicator if serving player won the point
    mutate(server_won = ifelse(PointWinner == 1, 1, 0))

alc_serving_fp <- sin_alc_paired[[2]] |> 
  mutate(player1 = "Jannik Sinner",
         player2 = "Carlos Alcaraz") |>
    # also create indicator if serving player won the point
    mutate(server_won = ifelse(PointWinner == 2, 1, 0))

combined_sin_alc_fixed_df <- bind_rows(sin_serving_fp, alc_serving_fp) |>
    arrange(pt_number) |>
  mutate(p1_wserv_prob = 0.68,
         p2_wserv_prob = 0.68) |>
  mutate(P1SetsWon = cumsum(SetWinner == 1),
           P2SetsWon = cumsum(SetWinner == 2)) |>
  select(pt_number, player1, player2, PointServer, p1_wserv_prob, p2_wserv_prob,
         P1PointsWon, P2PointsWon, P1GamesWon, P2GamesWon, P1SetsWon, P2SetsWon) |>
  mutate(PointServer = case_when(P1PointsWon == 0 & P2PointsWon == 0 & PointServer == 1 ~ 2,
                                 P1PointsWon == 0 & P2PointsWon == 0 & PointServer == 2 ~ 1,
                                 TRUE ~ PointServer))

plot_sin_alc_fixed_prior <- get_plot_df(combined_df = combined_sin_alc_fixed_df, 
                        which_player_prob = 2,
                        best_of_3 = FALSE,
                        advantage = FALSE) |>
  mutate(set_number = as.factor(as.numeric(total_sets))) |>
  # fix last row in data set where set_number is 6, should be a 5
  mutate(set_number = ifelse(pt_number == max(pt_number), '5', set_number)) |>
  mutate(set_number = as.factor(set_number))
```

```{r}
plot_sin_alc_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_line(aes(y = win_prob_px, color = "Small Prior"), alpha = 0.5) +
  geom_line(data = plot_sin_alc_large_prior, aes(y = win_prob_px, color = "Large Prior"), alpha = 0.5) +
  geom_line(data = plot_sin_alc_fixed_prior, aes(y = win_prob_px, color = "Fixed Prior"), alpha = 0.5) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Alcaraz vs Sinner US Open Quarterfinal 2022",
       subtitle = "Probability of Alcaraz Winning Match with Different Priors",
       caption = "Comparing Different Prior Distributions",
       color = "Server") +
  scale_color_manual(values = c("Small Prior" = "red", "Large Prior" = "blue", "Fixed Prior" = "green"),
                     labels = c("Small Prior", "Large Prior", "Fixed Prior")) +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_sin_alc_small_prior))) +
  scale_colour_viridis_d() +
  theme_bw(base_size = 14)
```

## Case Study 2: Gauff vs Sabalenka

```{r}
#| output: false
#| cache: true
gauff_sab_paired <- wrangle_point_level(ext = "2023-usopen-points.csv",
                               ID = "2023-usopen-2701")

gauff_serving <- gauff_sab_paired[[1]]
saba_serving <- gauff_sab_paired[[2]]

combined_prob_gauff_sab_sp_df <- get_probabilities_df(p1_serving_df = gauff_serving,
                                 p2_serving_df = saba_serving,
                                 p1 = "Coco Gauff",
                                 p2 = "Aryna Sabalenka",
                                 p1_original_prob = 0.3550237,
                                 p1_original_se = 0.09351795,
                                 p2_original_prob = 0.1801184,
                                 p2_original_se = 0.09535962)

plot_gauff_sab_small_prior <- get_plot_df(combined_df = combined_prob_gauff_sab_sp_df,
                                        which_player_prob = 1,
                                        best_of_3 = TRUE,
                                        advantage = FALSE) |>
  mutate(set_number = as.factor(as.numeric(total_sets))) |>
  # fix last row in data set where set_number is 6, should be a 5
  mutate(set_number = ifelse(pt_number == max(pt_number), '3', set_number)) |>
  mutate(set_number = as.factor(set_number))

plot_first_set_gauff_sab <- plot_gauff_sab_small_prior |>
  filter(set_number == 1)

first_set_boundaries_gauff_sab_small_prior <- plot_gauff_sab_small_prior |>
  group_by(set_number) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5) |>
  filter(set_number == 1)
```

```{r}
plot_gauff_sab_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_rect(data = first_set_boundaries_gauff_sab_small_prior, aes(x = NULL, y = NULL, xmin = xmin, xmax = xmax, 
                                       ymin = -Inf, ymax = Inf, fill = set_number), alpha = 0.2) + 
  geom_line(data = plot_first_set_gauff_sab, aes(y = win_prob_px)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Gauff vs Sabalenka US Open Final 2023",
       subtitle = "Probability of Gauff Winning Match",
       caption = "Prior contains 'lead-up' tournaments to the 2023 USO and 2023 USO itself",
       color = "Server") +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_gauff_sab_small_prior))) +
  scale_fill_manual(values = fills[1]) +
  theme_bw(base_size = 14)
```

## Case Study 2: Gauff vs Sabalenka

```{r}
plot_two_set_gauff_sab <- plot_gauff_sab_small_prior |>
  filter(set_number == 1 | set_number == 2)

two_set_boundaries_gauff_sab_small_prior <- plot_gauff_sab_small_prior |>
  group_by(set_number) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5) |>
  filter(set_number == 1 | set_number == 2)
```

```{r}
plot_gauff_sab_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_rect(data = two_set_boundaries_gauff_sab_small_prior, aes(x = NULL, y = NULL, xmin = xmin, xmax = xmax, 
                                       ymin = -Inf, ymax = Inf, fill = set_number), alpha = 0.2) + 
  geom_line(data = plot_two_set_gauff_sab, aes(y = win_prob_px)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Gauff vs Sabalenka US Open Final 2023",
       subtitle = "Probability of Gauff Winning Match",
       caption = "Prior contains 'lead-up' tournaments to the 2023 USO and 2023 USO itself",
       color = "Server") +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_gauff_sab_small_prior))) +
  scale_fill_manual(values = fills[1:2]) +
  theme_bw(base_size = 14)
```

## Case Study 2: Gauff vs Sabalenka

```{r}
plot_three_set_gauff_sab <- plot_gauff_sab_small_prior |>
  filter(set_number == 1 | set_number == 2 | set_number == 3)

three_set_boundaries_gauff_sab_small_prior <- plot_gauff_sab_small_prior |>
  group_by(set_number) |>
  summarize(xmin = min(pt_number) - 0.5,
            xmax = max(pt_number) + 0.5) |>
  filter(set_number == 1 | set_number == 2 | set_number == 3)
```

```{r}
plot_gauff_sab_small_prior |> ggplot(aes(x = pt_number, y = probability)) +
  geom_rect(data = three_set_boundaries_gauff_sab_small_prior, aes(x = NULL, y = NULL, xmin = xmin, xmax = xmax, 
                                       ymin = -Inf, ymax = Inf, fill = set_number), alpha = 0.2) + 
  geom_line(data = plot_three_set_gauff_sab, aes(y = win_prob_px)) +
  labs(x = "Point Number",
       y = "Probability of Winning Match",
       title = "Gauff vs Sabalenka US Open Final 2023",
       subtitle = "Probability of Gauff Winning Match",
       caption = "Prior contains 'lead-up' tournaments to the 2023 USO and 2023 USO itself",
       color = "Server") +
  coord_cartesian(ylim = c(0, 1),
                  xlim = c(0, nrow(plot_gauff_sab_small_prior))) +
  scale_fill_manual(values = fills[1:3]) +
  theme_bw(base_size = 14)
```

## Conclusion


## Acknowledgements

  - Jeff Sackman Github
  - Skoval `deuce` package
  - James Wolpe SLU '23 prior distribution
  - Dr. Matt Higham